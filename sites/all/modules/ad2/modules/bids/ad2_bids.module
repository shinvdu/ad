<?


function ad2_bids_menu(){
	
  $items["ad2/%ad2/bids"] = array(
    'title' => 'מחיר להקלקה לפי קטגוריה',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ad2_bids_bids_form' ,  1),
    'access callback' =>  'ad2_bids_access_tab',
    'access arguments' => array(1, 'bids'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'ad2_bids.pages.inc',
    'weight' => 50,
  );


  $items['admin/config/ad2/bids-auto'] = array(
    'title' => 'Auto Bids',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ad2_bids_admin_autobids'),
    'access arguments' => array( 'administer advertisements'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 13,
    'file' => 'ad2_bids.admin.inc',
  );
  
	
	

  $items["admin/reports/ad2/bids-auto"] = array(
    'title' => 'מחירים אוטומטיים',
    'page callback' => 'ad2_bids_report',
    'access arguments' => array('administer advertisements'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'ad2_bids.admin.inc',
    'weight' => 5,
  );

	

  $items["admin/reports/ad2/bids-auto/default"] = array(
    'title' => 'בידים אחרונים',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  );

	
  $items["admin/reports/ad2/bids-auto/bysite"] = array(
    'title' => 'יומן',
    'page callback' => 'ad2_bids_bysite_report',
    'access arguments' => array('administer advertisements'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'ad2_bids.admin.inc',
    'weight' => 2,
  );

	

	return $items;
}

function ad2_bids_access_tab($ad , $tab ){
	
	
	global $user;
	
	
	switch ($tab) {
		case 'bids':
			if(  in_array($ad->type, ad2_clickprice_bundles() ) ){
				//return ( user_access('edit any advertisement') || node_access('edit' , $node) );
				return ( user_access('edit any ad2 entities') || (user_access('edit own ad2 entities' ) && ($user->uid == $ad->uid)) );
			}
			break;
	
		default:
			return false;
			break;
	}
	return false;
}


function _ad2_bids_get_node_tids( $node ){

	$tids = array();
	if( isset($node->field_tags['und']) ){
		foreach ($node->field_tags['und'] as $delta => $value) {
			$tids[] = $value['tid'];
		}
	}
	
	foreach ( array('zone' , 'area' , 'settlement') as $n ) {
		if( isset($node->{"field_" . $n}['und'][0]['tid']))
			$tids[] = $node->{"field_" . $n}['und'][0]['tid'];
	}
	
	return $tids;
}


// 
// function ad2_bids_entity_insert($entity, $type){
// 	
	// if( $type == 'ad2'){
		// if( variable_get('ad2_bids_' . $entity->type , false) ){
			// $tids = _ad2_bids_get_node_tids( $entity->ad_parent );
// 			
// 			
			// $auto = isset( $entity->ad_parent->field_auto_campaign['und'][0]['value'] ) ? $entity->ad_parent->field_auto_campaign['und'][0]['value'] : 0;
// 		
			// $bid = isset($entity->ad_parent->field_click_price['und'][0]['value'])  ? $entity->ad_parent->field_click_price['und'][0]['value'] : had_get_default_click_price();
			// $bid = $bid >= ad2_clickprice_get_default_click_price() ? $bid : ad2_clickprice_get_default_click_price(); 
// 		
			// $score = 1;
// 			
			// foreach ($tids as $tid ) {
				// if( $tid ){
					// db_insert('ad2_bids')
						// ->fields(array(
							// 'aid' => $entity->aid,
							// 'tid' => $tid,
							// 'bid' => $bid, 
							// 'rank' => $score * $bid,
							// 'score' => $score,
							// 'status' => 1,
							// 'auto' => $auto,
							// 'auto_manual' => -1,
							// 'rerank' => 1,
						// )) 
						// ->execute()
						// ;
				// }
			// }
		// }
// 		
	// }
// }


// 
// 	
// function had_bids_node_insert($node){
// 	
	// //$node->field_auto_campaign['und'][0]['value'] = 1;
	// //$node->field_click_price['und'][0]['value']
// 		
// 		
	// /**
	 // * what about the quality, rank 
	 // */
// 	
	// if( in_array( $node->type , had_money_get_node_types()) ){
// 		
// 		
		// //$node->field_click_price['und'][0]['value']
		// /**
		 // * here i need to check the site categories instead
		 // */
		// $nid = $node->field_site['und'][0]['nid'];
		// $site = node_load( $nid );
		// $tids = _had_bids_get_node_tids( $site );
// 		
		// $auto = isset( $site->field_auto_campaign['und'][0]['value'] ) ? $site->field_auto_campaign['und'][0]['value'] : 0;
// 		
		// $bid = isset($site->field_click_price['und'][0]['value'])  ? $site->field_click_price['und'][0]['value'] : had_get_default_click_price();
		// $bid = $bid >= had_get_default_click_price() ? $bid : had_get_default_click_price(); 
// 		
// 		
// 		
// 		
		// $weights = variable_get('had_rank_weights' , array() );
// 	
		// $scores = array();
		// foreach ($weights as $module => $w ) {
			// $s = 1; // lowest
			// $scores[$module] =  round( $s * $w /100 , 3 );
		// }
// 	
		// $score = round(  array_sum( $scores ) , 3 );
// 			
		// /**
		 // * what about auto ? 
		 // */
		// foreach ($tids as $tid ) {
			// if( $tid ){
				// db_insert('ad_bids')
					// ->fields(array(
						// 'aid' => $node->nid,
						// 'tid' => $tid,
						// 'bid' => $bid, // isset($site->field_click_price['und'][0]['value']),
						// 'rank' => $score * $bid,
						// 'score' => $score,
						// 'status' => 1,
						// 'auto' => $auto, // here i need to copy data from site
						// 'auto_manual' => -1,
						// 'rerank' => 1,
						// //'components' => serialize($scores),
					// )) 
					// ->execute()
					// ;
			// }
		// }
// 		
	// }
// }
// 
// 

// 
// function ad2_bids_entity_update($entity, $type){
	// if( $type == 'ad2'){
		// //ad2_statistic_increment($entity->aid, 'update' );
	// }
// }

// 
// function ad2_bids_node_update($node){
// 	
	// global $user;
// 	
// 	
	// if( in_array( $node->type , had_money_get_node_types()) ){
// 		
		// foreach ($node->bids as $tid => $obj ) {
// 				
			// // user values
			// if( isset( $node->bids[$tid]['new_bid_manual'] )   ){
				// if( $node->bids[$tid]['new_bid_manual'] ){
					// $node->bids[$tid]['bid_manual'] = $node->bids[$tid]['new_bid_manual'];
					// $node->bids[$tid]['bid'] 		= $node->bids[$tid]['new_bid_manual'];
				// } else {
					// $node->bids[$tid]['bid_manual'] = 0;
					// $node->bids[$tid]['bid'] 		= $node->ad->price;
				// }
// 				
			// }
// 			
			// if( isset( $node->bids[$tid]['new_auto'] )   ){
				// if( $node->bids[$tid]['new_auto'] != $node->bids[$tid]['auto'] ){
					// $node->bids[$tid]['auto_manual'] 	= $node->bids[$tid]['new_auto'];
					// $node->bids[$tid]['auto'] 			= $node->bids[$tid]['new_auto'];
				// }
			// }
// 			
// 			
			// // logic
			// if( $node->bids[$tid]['auto_manual'] == -1 ){
				// $node->bids[$tid]['auto'] = $node->ad->auto;
			// }
// 				
			// if( $node->bids[$tid]['auto'] == 1 ){
				// $node->bids[$tid]['bid'] = $node->ad->price;
			// } else {
				// if( $node->bids[$tid]['bid_manual'] != 0 ){
					// $node->bids[$tid]['bid'] = $node->bids[$tid]['bid_manual'];
				// } else {
					// $node->bids[$tid]['bid'] = $node->ad->price;
				// }
			// }
// 			
// 			
// 			
		// }
// 		
// 		
// 		
// 		
		// // if( $node->original->field_click_price['und'][0]['value'] !=  $node->field_click_price['und'][0]['value'] ){
			// // foreach ($node->bids as $tid => $obj ) {
				// // if( ! $obj->auto && ! $obj->bid_manual ){
					// // $node->bids[$tid]->bid = $node->field_click_price['und'][0]['value'];
				// // }
			// // }
		// // }
// 		
		// // here i need to decide if the row is auto or not 
// 		
// 		
		// //had_bids_update_bids($node); 
		// //had_bids_update_rank($node);
// 			
		// foreach ($node->bids as $tid => $obj ) {
			// db_update('ad_bids')
				// ->condition('id' , $obj['id'] )
				// ->fields(array(
					// 'bid' 		=> $obj['bid'],
					// 'rank' 		=> $obj['rank'],
					// 'score' 	=> $obj['score'],
					// 'bid_manual'=> $obj['bid_manual'],
					// 'auto' 		=> $obj['auto'],
					// 'auto_manual'=>$obj['auto_manual'],
					// 'status' 	=> $obj['status'],
					// 'rerank' => 1,
					// //'components'=> $obj['components'],
				// ))
				// ->execute()
				// ;
		// }
	// }
// 	
	// // update ad_bids with site categories
	// if( $node->type == 'site'){
// 
		// /**
		 // * first check if the site categories where changed
		 // */
		// $original = $node->original;
// 		
		// $tids_new = _had_bids_get_node_tids($node);
		// $tids_old = _had_bids_get_node_tids($node->original);
// 		
		// /**
		 // * if old has something that new does not have add old to delete list
		 // */
		// $delete = array();
		// foreach ($tids_old as $tid ) {
			// if( ! in_array($tid , $tids_new ) ){
				// $delete[] = $tid;	
			// }
		// }
// 		
		// /**
		 // * if new has something that old does not have add new to add list
		 // */
		// $add = array();
		// foreach ($tids_new as $tid ) {
			// if( ! in_array($tid , $tids_old ) ){
				// $add[] = $tid;	
			// }
		// }
// 		
// 		
// 		
		// $s = db_select('ads' , 'a')
			// ->fields('a' , array('aid'))
			// ->condition('nid' , $node->nid )
			// ->condition('adtype' , had_money_get_node_types() , 'IN' )
			// ;
// 			
		// $aids = $s->execute()->fetchCol();
// 		
		// if( count($delete) && count($aids)){
			// $q = db_delete('ad_bids')
				// ->condition('aid' , $aids , 'IN' )
				// ->condition('tid' , $delete , 'IN' )
				// ;
			// $r = $q->execute();
// 			
			// if( $user->uid == 1)
			// drupal_set_message(t('נמחקו @num שורות מטבלת מחירי הקלקה למודעות' , array('@num' => $r)) );
		// }
// 		
		// if( count($add) && count($aids) ){
// 			
			// $ads = node_load_multiple($aids);
// 			
			// $items = array();
// 			
			// // todo: few correction here
			// foreach ($ads as $aid => $ad ) {
				// foreach ($add as $tid) {
					// $items[] = array(
						// 'aid' => $aid,
						// 'tid' => $tid,
						// 'bid' => $ad->ad->price, //field_click_price['und'][0]['value'],
						// 'rank' => 1,
						// 'score' => 1,
						// 'status' => 1,
						// 'rerank' => 1,
						// //'auto' => folow ad policy 
					// );
				// }
			// }
// 			
// 					
			// foreach ($items as $item) {
				// $query = db_insert('ad_bids')
					// ->fields(array('aid', 'tid', 'bid', 'rank' , 'score' , 'status' , 'rerank'))
					// ->values($item)
					// ;
				// $id = $query->execute();
// 							
// 
				// if( $user->uid == 1  )
					// drupal_set_message('נוספה שורה לטבלת מחירי הקלקה למודעות');
// 				
			// }
		// }
	// }
// 	
// }


// maybe there is no need to load all
// function ad2_bids_node_load($nodes, $types){
	// return;
// 	
// 	
	// $sites_ads_bids = &drupal_static(__FUNCTION__, array()  );
// 	
	// foreach ($nodes as $node ) {
		// if( in_array($node->type, had_money_get_node_types() ) ) {
			// if( isset($sites_ads_bids[$node->nid]) ){
				// $node->bids = $sites_ads_bids[$node->nid];
			// } else {
				// $rows = db_query("select * from ad_bids where aid = :aid" , array(':aid' => $node->nid) )->fetchAll();
				// foreach ($rows as $row ) {
					// $sites_ads_bids[$row->aid][$row->tid] = (array) $row;
				// }
				// //$sites_ads_bids[$node->nid] = (array) $row;
				// $node->bids = $sites_ads_bids[$node->nid];
			// }
		// }
	// }
// // 	
	// // $sites_ads_bids = &drupal_static(__FUNCTION__, array()  );
// // 	
	// // $intersect = array_intersect( $types ,   had_money_get_node_types() );
// // 	
	// // if( count($intersect) ){
		// // if( count($sites_ads_bids) == 0 ){
			// // $rows = db_query("select * from ad_bids")->fetchAll();
// // 		
			// // foreach ($rows as $row ) {
				// // $sites_ads_bids[$row->aid][$row->tid] = (array) $row;
			// // }
// // 			
		// // }
// // 		
		// // foreach ($nodes as $node ) {
			// // if( isset($sites_ads_bids[$node->nid]) ){
				// // $node->bids = $sites_ads_bids[$node->nid];
			// // }
		// // }
	// // }
// }

// 
// function ad2_bids_entity_delete($entity, $type){
	// if( $type == 'ad2'){
		// db_delete('ad2_bids')
			// ->condition('aid' , $entity->aid )
			// ->execute()
			// ;
	// }
// }


// 
// function had_bids_node_delete($node){
// 	
	// /**
	 // * ad a message
	 // */
	// db_delete('ad_bids')
			// ->condition('aid' , $node->nid )
			// ->execute()
			// ;
// }


function ad2_bids_theme($existing, $type, $theme, $path) {
	
  return array(
	'ad2_bids_bids_form' => array(
      'file' => 'ad2_bids.pages.inc',
      'render element' => 'form', 
    ),
    'ad2_bids_admin_autobids' => array(
      'file' => 'ad2_bids.admin.inc',
      'render element' => 'form',
    ),
  );
}

function _ad2_bids_caculate_auto_bids($node){
	
	$site = node_load($node->ad->nid);
	
	if( $site->status ){
		
		$roof = $site->roof ? $site->roof : 0.001;
		
		$base = 1.2;
		$max = 10;
		
		foreach (_had_auto_default_values_info() as $row ) {
			if( $roof >= $row['min'] && $roof < $row['max'] ){
				$base = $row['bid'];
				$max = $row['bid_max'];
			}
		}
		//tr( "base = " . $base );
				
		$done = -1 *  account_balance_spending_today($node->ad->nid);
		if( $done == 0 ) $done = 0.01;
		//tr( "done = " . $done );
		
		$p =  $done / $roof;
		//tr( "done/roof = " . $p );
				
		$hours = _had_auto_clicks_by_hour_info();
		$h = date('G');
		//tr( "hour = " . $h );
		
		$a = $hours[$h] /100;
		//tr( "hour factor = " . $a );
				
		$q = $a / $p;
		//tr( "hour factor /  (done/roof )= " . $q );
				
		$bid2 = $q * $base;
		
		if( $bid2 > $max){
			$bid2 = $max;
		}
// 		
		// if( $bid2 < 1.2 ){
			// $bid2 = 1.2;
		// }
// 		
		
		if( $bid2 < 0.9 ){
			$bid2 = 0.9;
		}
		
		return $bid2;
	
	} else {
		return 15;
	}
		
}
// 
// // update the ranks of the node
// function ad2_bids_rank($node){
// 	
	// /**
	 // * go over all terms in node
	 // */
	// if( in_array( $node->type , had_money_get_node_types()) ){
// 
		// $rows = array();
// 		
		// foreach ($node->bids as $tid => $row ) {
// 				
			// $row['rank_original'] = $row['rank'];
// 			
			// $row['rank'] = round(  $row['bid'] * $row['score'] , 4);
// 			
			// if( $row['rank_original']  != $row['rank'] ){
// 				
				// db_update('ad_bids')
					// ->condition('aid' , $node->nid )
					// ->condition('tid' , $tid )
					// ->fields(array(
						// 'rank' 	=> $row['rank'],
					// ))
					// ->execute()
					// ;
// 					
				// $node->bids[$tid]['rank'] = $row['rank'];
			// }
// 			
		// }
	// }
// 	
// }

// 
// // update the ranks of the node
// function ad2_bids_update_rank($node){
// 	
	// //go over all terms in node
	// if( in_array( $node->type , had_money_get_node_types()) ){
// 
		// $rows = array();
		// foreach ($node->bids as $tid => $row ) {
			// $node->bids[$tid]['rank'] = round(  $row['bid'] * $row['score'] , 4);
		// }
// 
	// }
// 	
// }
// 


function _ad2_auto_default_values_info(){
	$autobids = variable_get('had_autobids_table' , array());
	return $autobids;
}


function ad2_bids_clicks_by_hour_info(){
	
	return array(
		0 => 0,
		1 => 3.7,
		2 => 5.57,
		3 => 6.47,
		4 => 6.99,
		5 => 7.34,
		6 => 7.66,
		7 => 8.38,
		8 => 10.1,
		9 => 13.19,
		10 =>17.9,
		11 =>23.6,
		12 =>29.7,
		13 =>35.78,
		14 =>41.9,
		15 =>48.14,
		16 =>54.05,
		17 =>59.74,
		18 =>65.43,
		19 =>71.19,
		20 =>76.5,
		21 =>82.3,
		22 =>87.6,
		23 =>93.9,
		24 =>100,
	);
}



function ad2_bids_ad2_cron_info(){
	$jobs['default']['info'] = 'automatic bids';
	return $jobs;
}


function ad2_bids_ad2_cron_run( $delta ){
	
	//return ;
	
	$last = variable_get('ad2_bids_default_last_ad2_cron_run' , 0 );
	
	if( true || REQUEST_TIME > ( $last + 60 ) ){
		
				
		$sites =  array();
		
		timer_start('bids');
		// go over all auto rows and update the bid
		
		$q = db_select('ad2_roof' , 'ar');
		$q->fields('ar' , array('nid' , 'roof'));
		$roofs = $q->execute()->fetchAllKeyed();
		
		//tr( $roofs );
		//die();
		
		$query = db_select('ad2_rank' , 'ab');
		$query->fields('ab' , array('id' , 'aid' , 'nid' , 'bid' , 'auto'));
		//$query->fields('a' , array('nid'));
		$query->join('ad2' , 'a' , 'a.aid = ab.aid');
		$query->condition('a.adstatus' , 'active');
		$query->condition('ab.auto' , 1);
		$query->join('node' , 'n' , 'ab.nid = n.nid');
		$query->condition('n.status' , 1);
		
		$rows = $query->execute()->fetchAll();
		
		$ads = array();
		foreach ($rows as $row) {
			if( ! isset($ads[$row->nid]) ){
				$ads[$row->nid] = array('aids' => array());
			}
			
			if( ! in_array($row->aid , $ads[$row->nid]['aids']) ){
				$ads[$row->nid]['aids'][] = $row->aid;
			}
		}
		
		
		$autobids = variable_get('ad2_autobids_table' , array());
		
		foreach ($ads as $nid => $v) {
			
			$roof = $roofs[$nid] ? $roofs[$nid] : 0.001;
			$ads[$nid]['roof'] = $roof;
			
			$done = -1 *  account_balance_spending_today($nid);
			if( $done == 0 ) $done = 0.01;
			
			$ads[$nid]['done'] = $done;
			
			
			$base 	= 1.2;
			$max 	= 10;
			
			
			foreach ($autobids as $line ) {
				if( $roof >= $line['min'] && $roof < $line['max'] ){
					$base 	= $line['bid'];
					$max 	= $line['bid_max'];
				}
			}

			$p =  $done / $roof;
					
			$hours = ad2_bids_clicks_by_hour_info();
			$h = date('G');
			$a = $hours[$h] /100;
					
			$q = $a / $p;
								
			$bid = $q * $base;
			
			if( $bid > $max){
				$bid = $max;
			}
	
			if( $bid < 0.9 ){
				$bid = 0.9;
			}
			
			$ads[$nid]['bid'] = $bid;
		}
		
		
		//tr( $ads );
		//tr( $rows );
		
		
		$count = 0;
		foreach ($ads as $nid => $v) {
				
			$n1 = db_update('ad2_rank')
				->condition('aid' , $v['aids'] , 'IN')
				->condition('auto' , 1 )
				->fields(array('bid' => $v['bid'] , 'rerank' => 1 ))
				->execute()
				;	
			//tr( $n1 );
			//tr( get_class_methods($n1) );
			$count += $n1;
		}
		
		//die();
		
		// here put all in log: nid timestamp bid
		foreach ($ads as $nid => $data) {
			db_insert('ad2_bids_auto_log')
				->fields(array(
					'bid' => $data['bid'] , 
					'roof' => $data['roof'],
					'done' => $data['done'],
					'nid' => $nid , 
					'timestamp' => REQUEST_TIME ,
					))
				->execute()
				;	
		}
		
		watchdog(
			'בידים אוטומטיים' , 
			'@count rows updated. execution time @timer ms' , 
			array('@count' => $count , '@timer' => timer_read('bids') )
		);
		
	
		variable_set('ad2_bids_default_last_ad2_cron_run' , REQUEST_TIME );
	}
}


function ad2_bids_cron(){
	
	$last = variable_get('ad2_bids_cron_last' , 0 );
	
	if( REQUEST_TIME > ( $last + 24*60*60 ) ){
		
		db_delete('ad2_bids_auto_log')
			->condition('timestamp' , time() - 2*24*60*60 , '<')
			->execute()
			;
			
		variable_set('ad2_bids_cron_last' , REQUEST_TIME );
	}
	
}